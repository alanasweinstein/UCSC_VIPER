opt <- list()
opt$output <- 'viper-output'
opt$regulon <- 'multinet.adj'
opt$expression <- 'data.tab'
opt$phenotype <- 'phebotypes.tab'
opt$test_phenotype <- 'Tumor'
opt$reference_phenotype <- 'Normal'
library(mixtools)
#library(bcellViper)
library(viper)
library(Biobase)
parse.tab <- function (file) {
  m <- read.table(file, sep="\t", row.names=1, header=TRUE, quote="", check.names=FALSE)
  return (as.matrix(m))
}
parse.phenotypes <- function (file) {
    m <- read.table(file, sep="\t", row.names=1, header=TRUE, quote="", check.names=FALSE)
    phenoData <- new("AnnotatedDataFrame", data = m)
    return (phenoData)
}
makeExpressionSet <- function(data.matrix, phenoData) {
  exprSet <- new("ExpressionSet", exprs = data.matrix, phenoData = phenoData,
         annotation = "viper_input")
    return (exprSet)
}
exprs = parse.tab(opt$expression)
head(exprs)
pheno = parse.phenotypes(opt$phenotypes)
opt$phenotypes
opt$phenotypes <- 'phebotypes.tab'
pheno = parse.phenotypes(opt$phenotypes)
opt$phenotypes <- 'phenotypes.tab'
pheno = parse.phenotypes(opt$phenotypes)
head(pheno)
pheno
if (length(setdiff(rownames(pData(pheno)),colnames(exprs)))!=0) {
    print ("Error: phenotype and expression sample lists must be identical!")
    q();
}
if ( is.null( opt$num_results) ) { opt$num_results<- 30 }
expset.obj = makeExpressionSet(exprs, pheno)
head(expset.obj)
head(expset.obj$exprs)
print (expset.obj)
regulon <- opt$regulon
regul <- aracne2regulon(regulon, expset.obj)
head(regul)
parse.tab <- function (file) {
  m <- read.table(file, sep="\t", row.names=1, header=TRUE, quote="", check.names=FALSE)
  print(m)
  return (as.matrix(m))
}
exprs = parse.tab(opt$expression)
parse.tab <- function (file) {
  m <- read.table(file, sep="\t", row.names=1, header=TRUE, quote="", check.names=FALSE)
  print(m[1])
  return (as.matrix(m))
}
exprs = parse.tab(opt$expression)
parse.tab <- function (file) {
  m <- read.table(file, sep="\t", row.names=1, header=TRUE, quote="", check.names=FALSE)
  print(m[0])
  return (as.matrix(m))
}
exprs = parse.tab(opt$expression)
parse.tab <- function (file) {
  m <- read.table(file, sep="\t", row.names=1, header=TRUE, quote="", check.names=FALSE)
  return (as.matrix(m))
}
exprs = parse.tab(opt$expression)
head(exprs)
 set1.idx <- which(colnames(exp.obj) %in% rownames(pData(exp.obj))[which(pData(exp.obj)[,1] == set1.label)])
    set2.idx <- which(colnames(exp.obj) %in% rownames(pData(exp.obj))[which(pData(exp.obj)[,1] == set2.label)])
pheno = parse.phenotypes(opt$phenotypes)
ls()
expset.obj = makeExpressionSet(exprs, pheno)
head(expset.obj)
regulon <- opt$regulon
regul <- aracne2regulon(regulon, expset.obj)
if (length(setdiff(rownames(pData(pheno)),colnames(exprs)))!=0) {
    print ("Error: phenotype and expression sample lists must be identical!")
    q();
}
if ( is.null( opt$num_results) ) { opt$num_results<- 30 }
expset.obj = makeExpressionSet(exprs, pheno)
print (expset.obj)
# parse the adj file to get a regulon object:
# note: all candidate regulators and genes must be in the
# dataset you parsed
regulon <- opt$regulon
num_results <- as.numeric(opt$num_results)
if (is.null(opt$num_results)) {
num_results <- 100
}
regulon <- regul 
exp.obj <- expset.obj
set1.label <- opt$test_phenotype
set2.label <- opt$reference_phenotype
 set1.idx <- which(colnames(exp.obj) %in% rownames(pData(exp.obj))[which(pData(exp.obj)[,1] == set1.label)])
    set2.idx <- which(colnames(exp.obj) %in% rownames(pData(exp.obj))[which(pData(exp.obj)[,1] == set2.label)])
set1.idx
set2.idx
 data.matrix = exprs(exp.obj)
head(data.matrix)
 signature <- rowTtest( data.matrix[,set1.idx], data.matrix[,set2.idx] )
head(data.matrix[,set1.idx])
head(data.matrix[,1])
typeof(head(data.matrix[,1]))
 signature <- rowTtest( data.matrix[,set1.idx], data.matrix[,set2.idx] )
rowTtest
showMethods("rowTtest")
signature
typeof(signature)
typeof(data.matrix)
class(data.matrix)
length(data.matrix)
class(data.matrix[,set1.idx])
as.matrix(data.matrix[,set1.idx]))
as.matrix(data.matrix[,set1.idx])
as.matrix(data.matrix[,set1.idx]) == data.matrix[,set1.idx]
    signature <- rowTtest( as.matrix(data.matrix[,set1.idx]), as.matrix(data.matrix[,set2.idx]) )
head(signature)
    signature <- rowTtest( as.matrix(data.matrix[,set1.idx]), as.matrix(data.matrix[,set2.idx]) )
head(signature)
ls()
opt
q()
